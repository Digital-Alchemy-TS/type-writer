import { is, TServiceParams } from "@digital-alchemy/core";
import { existsSync, writeFileSync } from "fs";
import { join } from "path";
import { exit } from "process";

const PICK_FROM_PLATFORM = `type PICK_FROM_PLATFORM<
  ID extends TPlatformId,
  DOMAIN extends TRawDomains = TRawDomains,
> = Extract<REGISTRY_SETUP["platform"][\`_\${ID}\`], PICK_ENTITY<DOMAIN>>;`;

export function BuildTypes({ logger, hass, type_writer, config, internal }: TServiceParams) {
  async function runner() {
    try {
      // install location
      // node_modules/@digital-alchemy/type-writer/dist/index.js
      //
      // relative target file
      // ../../hass/dist/dynamic.d.ts
      //
      const path = is.empty(config.type_writer.TARGET_FILE)
        ? join(__dirname, "..", "..", "hass", "dist", "dynamic.d.ts")
        : config.type_writer.TARGET_FILE;
      if (!existsSync(path)) {
        if (config.type_writer.TARGET_FILE !== path) {
          // Represents an error with the script
          // Calculated the wrong path, and something is up
          logger.fatal({ path }, `cannot locate target file, aborting`);
          return;
        }
        logger.warn({ path }, `creating new type definitions file`);
      }
      const text = await DoBuild();
      writeFileSync(path, text);
      logger.warn({ path }, `successfully wrote type definitions file`);
      logger.info(`{reload your editor to update types}`);
    } catch (error) {
      logger.fatal({ error }, `failed to write type definitions file`);
    }
  }

  // see file - libs/home-assistant/src/dynamic.ts
  async function DoBuild() {
    logger.info(`Pulling information`);
    const entities = await hass.fetch.getAllEntities();
    const entitySetup = {};
    entities.forEach(i => internal.utils.object.set(entitySetup, i.entity_id, i));

    try {
      logger.debug("building [ENTITY_SETUP]");
      const ENTITY_SETUP = await type_writer.domain.build();
      logger.debug("building [iCallService]");
      const typeInterface = await type_writer.call_service();

      return [
        `// This file is generated, and is automatically updated as a npm post install step`,
        "// Do not edit this file, it will only affect type definitions, not functional code",
        `import {`,
        `  ActionableNotification,`,
        `  AndroidActionableNotification,`,
        `  AppleActionableNotification,`,
        `  PICK_ENTITY,`,
        `} from "./helpers";`,
        ``,
        PICK_FROM_PLATFORM,
        ``,
        `// #MARK: ENTITY_SETUP`,
        ENTITY_SETUP,
        ``,
        `// #MARK: iCallService`,
        typeInterface,
        ``,
        `// #MARK: REGISTRY_SETUP`,
        type_writer.identifiers.RegistryDetails(),
        ``,
        `// #MARK: TAreaId`,
        type_writer.identifiers.area(),
        ``,
        `// #MARK: TDeviceId`,
        type_writer.identifiers.device(),
        ``,
        `// #MARK: TFloorId`,
        type_writer.identifiers.floor(),
        ``,
        `// #MARK: TLabelId`,
        type_writer.identifiers.label(),
        ``,
        `// #MARK: TZoneId`,
        type_writer.identifiers.zone(),
        ``,
        `// #MARK: TUniqueIDMapping`,
        type_writer.identifiers.uniqueIdMapping(),
        ``,
        `// #MARK: TUniqueID`,
        type_writer.identifiers.uniqueId(),
        ``,
        `// #MARK: TRawEntityIds`,
        type_writer.identifiers.entityIds(entities),
        ``,
        `// #MARK: TPlatformId`,
        type_writer.identifiers.platforms(),
        ``,
        `// #MARK: TRawDomains`,
        type_writer.identifiers.domains(entities),
      ].join(`\n`);
    } catch (error) {
      logger.error({ error }, "failed to build data, please report");
      exit();
    }
  }
  return runner;
}
